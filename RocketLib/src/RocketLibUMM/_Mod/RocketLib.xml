<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RocketLib</name>
    </assembly>
    <members>
        <member name="T:RocketLib.BroforceMod">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:RocketLib.BroforceMod.ID">
            <summary>
            The ID of the mod.
            </summary>
        </member>
        <member name="F:RocketLib.BroforceMod.__mod">
            <summary>
            The Unity mod of the class.
            </summary>
        </member>
        <member name="F:RocketLib.BroforceMod.__ID">
            <summary>
            The ID of the mod.
            </summary>
        </member>
        <member name="P:RocketLib.BroforceMod.Loaded">
            <summary>
            Is the mod is successful load.
            </summary>
        </member>
        <member name="P:RocketLib.BroforceMod.logger">
            <summary>
            Here you access Logger method.
            </summary>
        </member>
        <member name="F:RocketLib.BroforceMod.OnExitGame">
            <summary>
            Call when exiting game.
            </summary>
        </member>
        <member name="F:RocketLib.BroforceMod.OnLevelFinished">
            <summary>
            Call when a level is finished.
            </summary>
        </member>
        <member name="F:RocketLib.BroforceMod.OnAfterLoadMods">
            <summary>
            Call when all mod are loaded.
            </summary>
        </member>
        <member name="M:RocketLib.BroforceMod.#ctor">
            <summary>
            Create the mod.
            </summary>
        </member>
        <member name="M:RocketLib.BroforceMod.#ctor(UnityModManagerNet.UnityModManager.ModEntry)">
            <summary>
            Create the mod.
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:RocketLib.BroforceMod.Load(UnityModManagerNet.UnityModManager.ModEntry)">
            <summary>
            Function to call for loading the mod.
            </summary>
            <param name="mod">UnityModManager mod</param>
        </member>
        <member name="M:RocketLib.BroforceMod.OnUpdate">
            <summary>
            The Update function. Call it in Main.OnUpdate.
            </summary>
        </member>
        <member name="M:RocketLib.BroforceMod.Log(System.Object,RLogType,System.Boolean)">
            <summary>
            Faster method to write log.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
            <param name="Debug"></param>
        </member>
        <member name="T:RocketLib.BroforceModController">
             <summary>
            
             </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.Playables">
            <summary>
            All playable heroes. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.CampaignBro">
            <summary>
            All heroes playables in campaign. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.Expendabros">
            <summary>
            Expendabros heroes array. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.Unused">
            <summary>
            Unused Heroes. Some are playble some aren't. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.ForeverUpdate">
            <summary>
            Heroes from the Forever Update in unlock order. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.OriginalUnlockIntervals">
            <summary>
            The original unlock intervals dictionary. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.HeroSaveInterval">
            <summary>
            The original array of hero save number interval. (read only)
            </summary>
        </member>
        <member name="M:RocketLib.Utils.DrawDebug.DrawLine(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draw a debug line
            </summary>
            <param name="ID">Name of line, use the same name to update an existing line</param>
            <param name="start">Start position</param>
            <param name="end">End position</param>
            <param name="color">Color of line</param>
            <param name="width">Width of line</param>
        </member>
        <member name="M:RocketLib.Utils.DrawDebug.DrawRectangle(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draw a debug rectangle
            </summary>
            <param name="ID">Name of rectangle, use the same name to update an existing rectangle</param>
            <param name="corner1">One of the corners</param>
            <param name="corner2">The opposite corner of the first one provided</param>
            <param name="color">Color of rectangle</param>
            <param name="width">Width of rectangle</param>
        </member>
        <member name="M:RocketLib.Utils.DrawDebug.DrawCrosshair(System.String,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)">
            <summary>
            Draw a debug crosshair
            </summary>
            <param name="ID">Name of crosshair, use the same name to update an existing crosshair</param>
            <param name="center">Center of the crosshair</param>
            <param name="length">Length of each line</param>
            <param name="color">Color of crosshair</param>
            <param name="width">Width of crosshair</param>
        </member>
        <member name="P:RocketLib.Utils.ResourcesController.Particle_AlphaBlend">
            <summary>
            Particles/Alpha Blended
            </summary>
        </member>
        <member name="P:RocketLib.Utils.ResourcesController.Unlit_DepthCutout">
            <summary>
            Unlit/Depth Cutout With ColouredImage
            </summary>
        </member>
        <member name="P:RocketLib.Utils.ResourcesController.Particle">
            <summary>
            Particle/Additive
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetMaterial(System.String,System.String)">
            <summary>
            Creates a Material using the shader Unlit_DepthCutout.
            Loads Material from cache if created previously.
            </summary>
            <param name="path">Path to an image or asset</param>
            /// <param name="fileName">Name of an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetMaterial(System.String)">
            <summary>
            Creates a Material using the shader Unlit_DepthCutout.
            Loads Material from cache if created previously.
            </summary>
            <param name="filePath">Path to an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateMaterial(System.Byte[])">
            <summary>
            Creates a Material from an array of bytes using the shader Unlit_DepthCutout.
            The Material is not cached, use GetMaterial if caching is desired.
            </summary>
            <param name="imageBytes">Byte array to load image from</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateMaterial(System.String,UnityEngine.Shader)">
            <summary>
            Creates a Material using the specified image and shader.
            The Material is not cached, use GetMaterial if caching is desired.
            </summary>
            <param name="filePath">Path to an image file</param>
            <param name="shader">Shader to use</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateMaterial(System.String,UnityEngine.Material)">
            <summary>
            Creates a Material using the specified image and Material as a source.
            The Material is not cached, use GetMaterial if caching is desired.
            </summary>
            <param name="filePath">Path to an image file</param>
            <param name="source">Source Material to copy</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetTexture(System.String,System.String)">
            <summary>
            Creates a Texture2D from an image or asset file.
            Loads Texture2D from cache if created previously.
            </summary>
            <param name="path">Path to an image or asset</param>
            /// <param name="fileName">Name of an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetTexture(System.String)">
            <summary>
            Creates a Texture2D from an image or asset file.
            Loads Texture2D from cache if created previously.
            </summary>
            <param name="filePath">Path to an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateTexture(System.String)">
            <summary>
            Creates a Texture2D from an image or asset file.
            The Texture2D is not cached, use GetTexture if caching is desired.
            </summary>
            <param name="filePath">Path to an image file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateTexture(System.Byte[])">
            <summary>
            Creates a Texture2D from a byte array.
            The Texture2D is not cached, use GetTexture if caching is desired.
            </summary>
            <param name="imageBytes">Byte array to load image from</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetAudioClip(System.String,System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            Loads AudioClip from cache if created previously. Note that the same cached AudioClip can't be played several times simultaneously.
            </summary>
            <param name="path">Path to an audio file</param>
            <param name="fileName">Name of an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetAudioClip(System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            Loads AudioClip from cache if created previously. Note that the same cached AudioClip can't be played several times simultaneously.
            </summary>
            <param name="filePath">Path to an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateAudioClip(System.String,System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            The AudioClip is not cached, use GetAudioClip is caching is desired.
            </summary>
            <param name="path">Path to an audio file</param>
            <param name="fileName">Name of an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateAudioClip(System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            The AudioClip is not cached, use GetAudioClip is caching is desired.
            </summary>
            <param name="filePath">Path to an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.ExtractResource(System.String)">
            <summary>
            Creates a byte array from a file.
            </summary>
            <param name="filename">Name of a file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.LoadAssetSync``1(System.String)">
            <summary>
            Loads an object from an asset file.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Name of the asset file</param>
            <returns></returns>
        </member>
        <member name="T:RocketLib.Utils.IsThisMod">
            <summary>This constructor check if a mod is Here or is Enabled.
            <example>
            Example of call :
            <code>
                var RocketLib_info = new IsThisModIs("RocketLib");
            </code>
            </example>
            </summary>
        </member>
        <member name="P:RocketLib.Utils.IsThisMod.IsHere">
            <summary>
            Return if the mod is Here.
            </summary>
        </member>
        <member name="P:RocketLib.Utils.IsThisMod.IsEnabled">
            <summary>
            Return is the mod is Enabled, if the mod does not exist it will return false.
            </summary>
        </member>
        <member name="F:RocketLib.Utils.IsThisMod.ID">
            <summary>
            The ID of the given mod.
            </summary>
        </member>
        <member name="M:RocketLib.Utils.IsThisMod.#ctor(System.String)">
            <summary>This constructor check if a mod is Here or is Enabled. Actually it don't work.
            <example>
            Example of call :
            <code>
                RocketLib.IsThisModIs RocketLib_info = new RocketLib.IsThisModIs("RocketLib");
            </code>
            </example>
            </summary>
            <param name="ID">Id of the mod.</param>
        </member>
        <member name="M:RocketLib.Utils.IsThisMod.HasHarmonyPrefixPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has prefix patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.IsThisMod.HasHarmonyPostfixPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has Postfix patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.IsThisMod.HasHarmonyTranspilerPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has Transpiler patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.IsThisMod.HasHarmonyFinalizerPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has Finalizer patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="P:RocketLib.Utils.HeroUnlockCollection.HeroTypes_Intervals">
            <summary>
            It's the HeroType  list of the Broforce bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Utils.HeroUnlockCollection.Expendabros_HeroTypes_Intervals">
            <summary>
            It's the HeroType List of the Expendabros bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Utils.HeroUnlockCollection.Other_Bros_HeroTypes">
            <summary>
            It's the HeroType List of the Expendabros bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Utils.HeroUnlockCollection.Full_HeroType">
            <summary>
            It's the full HeroType list of the Broforce bros. Include Expendabros and Brondle Fly. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Utils.HeroUnlockCollection.Hero_Unlock_Intervals">
            <summary>
            The list of unlock intervals of the bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Utils.HeroUnlockCollection.Original_Unlock_Intervals">
            <summary>
            The original dictionary of the unlock intervals. (read only)
            </summary>
        </member>
        <member name="M:RocketLib.Utils.HeroUnlockCollection.ShowHeroUnlockIntervals">
            <summary>
            Show Current Unlock order
            </summary>
        </member>
        <member name="P:RocketLib.Utils.HeroUnlockCollection.Pocketed_Special_AmmoTypes">
            <summary>
            List of all PockettedSpecialAmmoType. (read only)
            </summary>
        </member>
        <member name="T:RocketLib.Utils.CreateTexture">
            <summary>
            Library of useful function made for Broforce. And an  Logger on screen.
            </summary>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromMat(System.String,UnityEngine.Material)">
            <summary>
            Create a Texture from a material. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath">Image path</param>
            <param name="material">Original Material</param>
            <returns>A Texture</returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromSpriteSM(System.String,SpriteSM)">
            <summary>
            Create a Texture from SpriteSM. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath">Image Path</param>
            <param name="sprite">Original Sprite</param>
            <returns>A Texture</returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromMeshRenderer(System.String,UnityEngine.MeshRenderer)">
            <summary>
            Create a Texture from a MeshRenderer. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="meshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromRenderer(System.String,UnityEngine.Renderer)">
            <summary>
            Create a Texture from a Renderer. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="Renderer"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromTexture(System.String,UnityEngine.Texture)">
            <summary>
            Create a Texture from an existing one. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="texture--"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.ComponentExtensions.RemoveComponent``1(UnityEngine.Component)">
            <summary>
            Remove the component of type T from the current Component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="self"></param>
        </member>
        <member name="T:RocketLib.GameObjectExtensions">
            <summary>
            Extensions for the GameObject class.
            </summary>
        </member>
        <member name="M:RocketLib.GameObjectExtensions.RemoveComponent``1(UnityEngine.GameObject)">
            <summary>
            Remove the component of type T from the current GameObject.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="self"></param>
        </member>
        <member name="M:RocketLib.StringExtensions.Dye(System.String,UnityEngine.Color)">
            <summary>
            Surround string with xml "color" tag
            </summary>
        </member>
        <member name="M:RocketLib.StringExtensions.Dye(System.String,System.String)">
            <summary>
            Surround string with xml "color" tag
            </summary>
        </member>
        <member name="T:RocketLib.GamePassword">
            <summary>
            Add password to the game
            </summary>
        </member>
        <member name="M:RocketLib.GamePassword.#ctor(System.String,System.Action)">
            <summary>
            Create the game password.
            </summary>
            <param name="_password"></param>
            <param name="_action"></param>
        </member>
        <member name="M:RocketLib.GamePassword.ToString">
            <summary>
            Return password
            </summary>
            <returns></returns>
        </member>
        <member name="M:RocketLib.KeyBinding.IsDown">
            <summary>
            Gets state of key
            </summary>
            <returns>True if key is pressed down</returns>
        </member>
        <member name="M:RocketLib.KeyBinding.PressedDown">
            <summary>
            Checks if key was just pressed
            </summary>
            <returns>True if key was pressed this frame</returns>
        </member>
        <member name="M:RocketLib.KeyBinding.Released">
            <summary>
            Checks if key was just released
            </summary>
            <returns>True if key was released this frame</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.LoadKeyBinding(System.String,System.String)">
            <summary>
            Finds a keybind for the mod for the specified key if it exists, otherwise it creates a new one.
            </summary>
            <param name="modName">Name of mod</param>
            <param name="keyName">Name of key</param>
            <returns>Previously created or newly created keybinding</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.AddKeyBinding(RocketLib.KeyBindingForPlayers,System.String)">
            <summary>
            Adds a keybind to the dictionary of all keybinds for a specific mod.
            </summary>
            <param name="keybinding">Keybind to add</param>
            <param name="modId">Name of the mod</param>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.TryGetKeyBinding(System.String,System.String,RocketLib.KeyBindingForPlayers@)">
            <summary>
            Tries to get a specific keybind for a specific mod.
            </summary>
            <param name="modName"></param>
            <param name="keyName"></param>
            <param name="keybinding"></param>
            <returns>True if it was found, false otherise</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.TryGetAllKeyBindingsForMod(System.String,System.Collections.Generic.Dictionary{System.String,RocketLib.KeyBindingForPlayers}@)">
            <summary>
            Returns a dictionary containing all the keybinds for the specified mod, if there are any.
            </summary>
            <param name="modName">Mod to find keybinds for</param>
            <param name="modKeyBindings">Dictionary containing all the keybinds for this mod</param>
            <returns>True if it was found, false otherise</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.ClearKeyBindingsForMod(System.String)">
            <summary>
            Clears all keybinds for the specified mod
            </summary>
            <param name="modName">Name of mod</param>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.ConvertToJson">
            <summary>
            Converts the dictionary containing the keybinds for all mods into JSON
            </summary>
            <returns>JSON string of all keybinds</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.ReadFromJson(System.String)">
            <summary>
            Reads from a JSON string and creates a dictionary storing all keybindings for all mods.
            </summary>
            <param name="json">JSON string to read from</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.RecreateDictionary">
            <summary>
            Creates a new Dictionary for keybindings for all mods. This will delete any currently stored keybindings for all mods.
            </summary>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.#ctor(System.String,System.String)">
            <summary>
            Create a Keybinding for all 4 players
            </summary>
            /// <param name="modId">Name of the mod that is adding the keybinding</param>
            <param name="name">Name of the key</param>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.IsDown(System.Int32)">
            <summary>
            Gets state of key
            </summary>
            <param name="player">Player to check keybinding for</param>
            <returns>True if key is currently down</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.PressedDown(System.Int32)">
            <summary>
            Checks if key was just pressed
            </summary>
            <param name="player">Player to check keybinding for</param>
            <returns>True if key was pressed this frame</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.Released(System.Int32)">
            <summary>
            Checks if key was just released
            </summary>
            <param name="player">Player to check keybinding for</param>
            <returns>True if key was released this frame</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.OnGUI(System.Int32@,System.Boolean,System.Boolean,System.String@,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Displays keybinding options for one or more players
            </summary>
            <param name="player">Player that had their keybinding clicked</param>
            <param name="displayToolTip">Display tooltip below keybinding</param>
            <param name="includeToolTip">Include tooltip with the keybinding. Doesn't display the tooltip unless displayToolTip is also set to true</param>
            <param name="previousToolTip">Previous tooltip that was displayed, used to ignore previous tooltips</param>
            <param name="playerToDisplay">Player to display if onlyOnePlayer is set to true</param>
            <param name="onlyOnePlayer">Only display one player's keybinding options</param>
            <param name="separateKeyName">Separate the keyname from the button, if set to false it will be included within the button</param>
            <param name="fixedWidth">Controls whether the button should be a fixed width or not</param>
            <returns></returns>
        </member>
        <member name="P:RocketLib.RGUI.Unexpanded">
            <summary> Do not expand the GUILayout width and height </summary>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.String[],System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="StringsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.String[],System.Int32,System.Single)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="StringsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <param name="Width"></param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.Object[],System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="ObjectsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.Object[],System.Int32,System.Single)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="ObjectsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <param name="Width"></param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.Tab(System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="Strings"></param>
            <param name="Number"></param>
            <param name="Space"></param>
            <param name="TabWidth"></param>
            <returns></returns>
        </member>
        <member name="F:RocketLib.Loggers.Logger.ID">
            <summary>
            The ID of the mod.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.Loaded">
            <summary>
            Is the mod is successful load.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.HasStartLog">
             <summary>
            
             </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.TimeNow">
            <summary>
            the current time.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.UseDebugLog">
            <summary>
            Show debug log.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.UseLocalLog">
            <summary>
            Write log locally.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.LogFilePath">
            <summary>
            Path of the file with the mod log.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.Prefix">
            <summary>
            Normal prefix.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.PrefixException">
            <summary>
            Exception prefix.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.PrefixInformation">
            <summary>
            Information prefix.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.PrefixWarning">
            <summary>
            Warning prefix.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.PrefixError">
            <summary>
            Error Prefix.
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.Logger.PrefixDebug">
            <summary>
            Debug prefix.
            </summary>
        </member>
        <member name="M:RocketLib.Loggers.Logger.#ctor(UnityModManagerNet.UnityModManager.ModEntry)">
             <summary>
            
             </summary>
             <param name="mod"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.OnUpdate">
            <summary>
            The Update function. Call it in Main.OnUpdate.
            </summary>
        </member>
        <member name="M:RocketLib.Loggers.Logger.StartLog">
             <summary>
            
             </summary>
        </member>
        <member name="M:RocketLib.Loggers.Logger.Log(System.Collections.Generic.IEnumerable{System.Object},RLogType,System.Boolean)">
            <summary>
            Write Log.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.Log(System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.Log(System.String,System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.Log(System.Object,RLogType,System.Boolean)">
            <summary>
            Write log.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ExceptionLog(System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ExceptionLog(System.String,System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ExceptionLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ExceptionLog(System.Object,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.WarningLog(System.Object,System.Boolean)">
            <summary>
            Write Warning Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.WarningLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write Warning Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.InformationLog(System.Object,System.Boolean)">
            <summary>
            Write information Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.InformationLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write information Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ErrorLog(System.Object,System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ErrorLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ErrorLog(System.Exception,System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ErrorLog(System.String,System.Exception,System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.DebugLog(System.Object,RLogType)">
            <summary>
            Write log only in debug mode.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.DebugLog(System.Collections.Generic.IEnumerable{System.Object},RLogType)">
            <summary>
            Write log only in debug mode.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.DebugLog(System.Exception,RLogType)">
            <summary>
            Write Exception Debug Log.
            </summary>
            <param name="exception"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.DebugLog(System.String,System.Exception,RLogType)">
            <summary>
            Write Exception Debug Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.WriteLogLocally(System.String,System.String)">
            <summary>
            Write log in the current mod folder.
            </summary>
            <param name="Message">Message to write in the log.</param>
            <param name="prefix">The prefix</param>
        </member>
        <member name="M:RocketLib.Loggers.Logger.ClearFileLog">
            <summary>
            Delete all lines in the log file.
            </summary>
        </member>
        <member name="T:RocketLib.Loggers.ScreenLogger">
            <summary>
            On screen logger.
            </summary>
        </member>
        <member name="P:RocketLib.Loggers.ScreenLogger.Instance">
            <summary>
            Instance of ScreenLogger
            </summary>
        </member>
        <member name="P:RocketLib.Loggers.ScreenLogger.IsLoaded">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.ScreenLogger.FullLogList">
            <summary>
            </summary>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.Clear">
            <summary>
            Clear the log on screen.
            </summary>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.Log(System.Object,RLogType)">
            <summary>
            Add log to the screen.
            </summary>
            <param name="str">Log Message</param>
            <param name="type">RLogType</param>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.Log(System.Object,System.String)">
            <summary>
            Add log to the screen. (BroforceMod edition)
            </summary>
            <param name="str">Log Message</param>
            <param name="prefix">Prefix of the log</param>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.WhichColor(System.String)">
            <summary>
            </summary>
            <param name="LogMsg"></param>
            <returns></returns>
        </member>
        <member name="P:RocketLib.Main.Loaded">
            <summary>
            Is RocketLib is Loaded
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.RandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns random element from collection
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.RandomIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns random index from collection
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is Collection null or empty
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is Collection NOT null or empty
            </summary>
        </member>
        <member name="M:ObjectExtensions.Is``1(System.Object)">
            <summary>
            Check if this is a particular type.
            </summary>
        </member>
        <member name="M:ObjectExtensions.As``1(System.Object)">
            <summary>
            Cast to a different type, exception-safe.
            </summary>
        </member>
        <member name="M:ObjectExtensions.InvokeBaseMethod(System.Object,System.Type,System.String)">
            <summary>
            Not great
            </summary>
            <param name="obj"></param>
            <param name="baseType"></param>
            <param name="methodName"></param>
            <returns></returns>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ObjectExtensions.InvokeBaseMethod``1(System.Object,System.Type,System.String)">
            <summary>
            Not great
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="baseType"></param>
            <param name="methodName"></param>
            <returns></returns>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:HarmonyExtensions.GetFieldValue``1(System.Object,System.String)">
            <summary>
            Get the value of a field as <typeparamref name="T"/>
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Field(string).GetValue&lt;T&gt;()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetFieldValue(System.Object,System.String)">
            <summary>
            Get the value of a field
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Field(string).GetValue()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Set the value of the field <paramref name="fieldName"/> with <paramref name="value"/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HarmonyExtensions.SetFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Set the value of the field <paramref name="fieldName"/> with <paramref name="value"/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HarmonyExtensions.CallMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Call a method then return value as <typeparamref name="T"/>
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Method(string, object[]).GetValue&lt;T&gt;()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Call a method then return value
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Method(string, object[]).GetValue()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetBool(System.Object,System.String)">
            <summary>
            Get bool field value
            </summary>
            <seealso cref="!:GetFieldValue&lt;bool&gt;(object, string)"/>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetFloat(System.Object,System.String)">
            <summary>
            Get float field value
            </summary>
            <seealso cref="!:GetFieldValue&lt;float&gt;(object, string)"/>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetInt(System.Object,System.String)">
            <summary>
            Get int field value
            </summary>
            <seealso cref="!:GetFieldValue&lt;float&gt;(object, string)"/>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.DynamicFieldsValueSetter(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.String[],System.Action{HarmonyLib.Traverse,System.String,System.Object})">
            <summary>
            Set multiple fields on an object from a <see cref="!:Dictionary&lt;string, object&gt;"/>
            Can navigate through instances from fields using the separator <see cref="F:HarmonyExtensions.PATH_SEPARATOR"/> in the <see cref="!:Dictionary&lt;string, object&gt;"/> key.
            <seealso cref="M:HarmonyExtensions.FindFieldWithPath(System.Object,System.String)"/>
            </summary>
            <param name="obj"></param>
            <param name="map">Key: Field Name | Value: the value to give to the field</param>
            <param name="skipTheseFields">Fields to ignore</param>
            <param name="setter">Custom action to set fields</param>
        </member>
        <member name="M:HarmonyExtensions.FindFieldWithPath(System.Object,System.String)">
            <summary>
            Use <see cref="F:HarmonyExtensions.PATH_SEPARATOR"/> to navigate through the objects.
            </summary>
            <example>
            We have 2 classes
            <code>
            class A
            {
                B b;
            }
            class B
            {
                int number = 8;
            }
            </code>
            If we want to get 'B.Number' from A, <paramref name="fieldPath"/> should be 'b.number'
            </example>
            <param name="obj"></param>
            <param name="fieldPath"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.FindFieldWithPath(HarmonyLib.Traverse,System.String)">
            <summary>
            Use <see cref="F:HarmonyExtensions.PATH_SEPARATOR"/> to navigate through the objects.
            </summary>
            <example>
            We have 2 classes
            <code>
            class A
            {
                B b;
            }
            class B
            {
                int number = 8;
            }
            </code>
            If we want to get 'B.Number' from A, <paramref name="fieldPath"/> should be 'b.number'
            </example>
            <param name="traverse"></param>
            <param name="fieldPath"></param>
            <returns></returns>
        </member>
        <member name="T:RLogType">
            <summary>
            Type of log for the log. They each have a "custom" color.
            </summary>
        </member>
        <member name="F:RLogType.Log">
            <summary>
            White
            </summary>
        </member>
        <member name="F:RLogType.Warning">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:RLogType.Error">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:RLogType.Exception">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:RLogType.Information">
            <summary>
            Blue
            </summary>
        </member>
    </members>
</doc>
